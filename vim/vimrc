" Load bundles
execute pathogen#infect()

"
" Basic settings
let g:seoul256_background=237
" colo seoul256-light
colo seoul256

" status bar
set laststatus=2
set statusline=%4*\ %<%F%*              " full path
set statusline +=%2*%m%*                " modified flag
set statusline +=%1*%=%5l%*             " current line
set statusline +=%2*/%L%*               " total lines
set statusline +=%1*%4v\ %*             " virtual column number
hi StatusLine ctermbg=yellow

" set background=light
set background=dark

set number
let t_Co=256
let mapleader=" "
set term=screen-256color
filetype off
syntax on
set undolevels=1000

" cntrl-o and p switch window splits
nmap <silent> <C-o> :wincmd h<CR>
nmap <silent> <C-p> :wincmd l<CR>

" Syntastic
let g:syntastic_check_on_open=1

" Tmux mouse fix (for resizing vim panes within tmux)
set mouse+=a
if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif

" Code folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

" tagbar
nmap ,, :TagbarToggle<CR>

" Tab settings
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoindent
set smartindent
filetype on
filetype plugin on
filetype indent on

" Search Options
set incsearch
set hlsearch
nnoremap <c-h> :set hlsearch!<Cr>
set ignorecase
set smartcase

" Smooth scroll
nnoremap <CR> :call smooth_scroll#down(&scroll, 20, 2)<cr>
nnoremap <silent> <c-d> :call smooth_scroll#down(15, 20, 2)<cr>
nnoremap <silent> <c-u> :call smooth_scroll#up(15, 20, 2)<cr>

" Fuzzy search runtime path
set rtp+=~/.fzf

" fuzzy finder shortcut call
nnoremap <c-t> :call fzf#run({'sink':'tabe'}) <Cr>

" I prefer gr to go back a tab
nnoremap gr gT

" F2 and F3 for saving and loading sessions
map <F2> :mksession! ~/vim_session <cr> " Quick write session with F2
map <F3> :source ~/vim_session <cr>     " And load session with F3

" Auto-closing pairs settings (delimitMate)
let delimitMate_matchpairs = "(:),[:],{:}"

" Easy motion settings
map <Leader> <Plug>(easymotion-prefix)

" Nerd Tree Settings
nnoremap \ :NERDTreeTabsToggle<Cr>
let g:NERDTreeWinSize = 45
let NERDTreeShowHidden=1

" get rid of that annoying netrwhist file stuff
let g:netrw_dirhistmax = 0

" tab labels
let g:taboo_modified_tab_flag="+"
let g:taboo_tab_format=' %N %f %m '

" MRU options
let MRU_Window_Height = 40

"""  CUSTOM SCRIPTS  """

" Smart indent when entering insert mode with i on empty lines
function! IndentWithI()
if len(getline('.')) == 0
return "\"_ddO"
else
return "i"
endif
endfunction
nnoremap <expr> i IndentWithI()

" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction
